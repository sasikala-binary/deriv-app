/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~account_dist_account_js_account-limits_js_501e634c"],{

/***/ "../../account/dist/account/js/account-limits.js":
/*!*******************************************************!*\
  !*** ../../account/dist/account/js/account-limits.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx-react */ \"../../../node_modules/mobx-react/dist/mobxreact.esm.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"), __webpack_require__(/*! react-dom */ \"../../../node_modules/react-dom/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx_react__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_dom__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Components/account-limits/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_account_limits)\\n});\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: ./Components/load-error-message/index.js + 1 modules\\nvar load_error_message = __webpack_require__(\\\"./Components/load-error-message/index.js\\\");\\n// EXTERNAL MODULE: ./Components/demo-message/index.js + 3 modules\\nvar demo_message = __webpack_require__(\\\"./Components/demo-message/index.js\\\");\\n;// CONCATENATED MODULE: ./Components/article/article.jsx\\n\\n\\n\\n\\n\\n\\nvar Article = function Article(_ref) {\\n  var title = _ref.title,\\n      descriptions = _ref.descriptions,\\n      onClickLearnMore = _ref.onClickLearnMore;\\n  var has_descriptions = (descriptions === null || descriptions === void 0 ? void 0 : descriptions.length) > 0;\\n  var has_single_description = (descriptions === null || descriptions === void 0 ? void 0 : descriptions.length) === 1;\\n  return /*#__PURE__*/external_react_.createElement(\\\"article\\\", {\\n    className: \\\"da-article\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"h4\\\",\\n    color: \\\"prominent\\\",\\n    line_height: \\\"m\\\",\\n    size: \\\"xs\\\",\\n    weight: \\\"bold\\\",\\n    className: \\\"da-article__header\\\"\\n  }, title), has_descriptions && /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, has_single_description ? /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"p\\\",\\n    size: \\\"xxs\\\",\\n    line_height: \\\"m\\\"\\n  }, descriptions[0]) : /*#__PURE__*/external_react_.createElement(\\\"ul\\\", {\\n    className: \\\"da-article__list\\\"\\n  }, descriptions.map(function (description, idx) {\\n    return /*#__PURE__*/external_react_.createElement(\\\"li\\\", {\\n      key: idx\\n    }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n      size: \\\"xxs\\\",\\n      line_height: \\\"xs\\\"\\n    }, description.component || description));\\n  }))), onClickLearnMore && /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-article__learn-more\\\",\\n    onClick: onClickLearnMore\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: \\\"xxs\\\",\\n    color: \\\"loss-danger\\\",\\n    line_height: \\\"s\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Learn more\\\"\\n  })), /*#__PURE__*/external_react_.createElement(components_.Icon, {\\n    icon: \\\"IcChevronRight\\\",\\n    className: \\\"da-article__learn-more-icon\\\",\\n    color: \\\"red\\\"\\n  })));\\n};\\n\\nArticle.propTypes = {\\n  descriptions: (prop_types_default()).array.isRequired,\\n  onClickLearnMore: (prop_types_default()).func,\\n  title: (prop_types_default()).string.isRequired\\n};\\n/* harmony default export */ const article = (Article);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-article.jsx\\n\\n\\n\\n\\n\\nvar AccountLimitsArticle = function AccountLimitsArticle() {\\n  return /*#__PURE__*/external_react_.createElement(article, {\\n    title: (0,translations_.localize)('Account limits'),\\n    descriptions: [/*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n      key: 0,\\n      i18n_default_text: \\\"These are default limits that we apply to your accounts.\\\"\\n    }), /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n      key: 1,\\n      i18n_default_text: \\\"To learn more about trading limits and how they apply, please go to the <0>Help Centre.</0>\\\",\\n      components: [/*#__PURE__*/external_react_.createElement(components_.StaticUrl, {\\n        key: 0,\\n        className: \\\"link\\\",\\n        href: \\\"/help-centre\\\"\\n      })]\\n    })]\\n  });\\n};\\n\\n/* harmony default export */ const account_limits_article = (AccountLimitsArticle);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-context.js\\n\\nvar AccountLimitsContext = /*#__PURE__*/external_react_.createContext();\\n/* harmony default export */ const account_limits_context = (AccountLimitsContext);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-extra-info.jsx\\nvar _excluded = [\\\"message\\\"];\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\n\\nvar AccountLimitsExtraInfo = function AccountLimitsExtraInfo(_ref) {\\n  var message = _ref.message,\\n      props = _objectWithoutProperties(_ref, _excluded);\\n\\n  if ((0,shared_.isMobile)()) {\\n    return /*#__PURE__*/external_react_.createElement(components_.Text, {\\n      color: \\\"less-prominent\\\",\\n      line_height: \\\"s\\\",\\n      size: \\\"xxxs\\\"\\n    }, message);\\n  }\\n\\n  return /*#__PURE__*/external_react_.createElement(components_.Popover, _extends({\\n    alignment: \\\"right\\\",\\n    className: \\\"da-account-limits__popover\\\",\\n    icon: \\\"info\\\",\\n    is_bubble_hover_enabled: true,\\n    message: message,\\n    zIndex: 9999\\n  }, props));\\n};\\n\\nAccountLimitsExtraInfo.propTypes = {\\n  message: (prop_types_default()).string.isRequired\\n};\\n/* harmony default export */ const account_limits_extra_info = (AccountLimitsExtraInfo);\\n// EXTERNAL MODULE: external \\\"react-dom\\\"\\nvar external_react_dom_ = __webpack_require__(\\\"react-dom\\\");\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-footer.jsx\\n\\n\\n\\n\\n\\n\\nvar AccountLimitsFooterPortal = function AccountLimitsFooterPortal() {\\n  var _React$useContext = external_react_.useContext(account_limits_context),\\n      footer_ref = _React$useContext.footer_ref,\\n      toggleOverlay = _React$useContext.toggleOverlay;\\n\\n  return /*#__PURE__*/(0,external_react_dom_.createPortal)( /*#__PURE__*/external_react_.createElement(components_.AppSettings.Footer, null, /*#__PURE__*/external_react_.createElement(components_.AppSettings.Footer.Left, null, /*#__PURE__*/external_react_.createElement(\\\"a\\\", {\\n    className: \\\"link link--prominent\\\",\\n    onClick: toggleOverlay\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: \\\"xxs\\\",\\n    line_height: \\\"m\\\",\\n    weight: \\\"bold\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Learn more about account limits\\\"\\n  }))))), footer_ref);\\n};\\n\\n/* harmony default export */ const account_limits_footer = (AccountLimitsFooterPortal);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-overlay.jsx\\n\\n\\n\\n\\n\\nvar AccountLimitsOverlay = function AccountLimitsOverlay() {\\n  var _React$useContext = external_react_.useContext(account_limits_context),\\n      overlay_ref = _React$useContext.overlay_ref,\\n      toggleOverlay = _React$useContext.toggleOverlay;\\n\\n  return /*#__PURE__*/external_react_.createElement(components_.Popup.Overlay, {\\n    descriptions: [{\\n      key: 'account_limits_desc_1',\\n      component: /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"These are default limits that we apply to your accounts.\\\"\\n      })\\n    }, {\\n      key: 'account_limits_desc_2',\\n      component: /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n        i18n_default_text: \\\"To learn more about account limits and how they apply, please go to the <0>Help Centre</0>.\\\",\\n        components: [/*#__PURE__*/external_react_.createElement(components_.StaticUrl, {\\n          key: 0,\\n          className: \\\"link\\\",\\n          href: \\\"/help-centre\\\"\\n        })]\\n      })\\n    }],\\n    done_text: (0,translations_.localize)('Done'),\\n    overlay_ref: overlay_ref,\\n    title: (0,translations_.localize)('Account limits'),\\n    toggleOverlay: toggleOverlay\\n  });\\n};\\n\\n/* harmony default export */ const account_limits_overlay = (AccountLimitsOverlay);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-table-cell.jsx\\n\\n\\n\\n\\n\\nvar AccountLimitsTableCell = function AccountLimitsTableCell(_ref) {\\n  var align = _ref.align,\\n      children = _ref.children,\\n      is_hint = _ref.is_hint,\\n      renderExtraInfo = _ref.renderExtraInfo;\\n  var text_size = is_hint ? 'xxxs' : 'xxs';\\n  return /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(\\\"td\\\", {\\n    className: classnames_default()('da-account-limits__table-cell', {\\n      'da-account-limits__table-cell--left': align !== 'right',\\n      'da-account-limits__table-cell--right': align === 'right'\\n    })\\n  }, children && /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    align: align,\\n    as: \\\"p\\\",\\n    color: \\\"prominent\\\",\\n    size: text_size,\\n    line_height: \\\"m\\\"\\n  }, children), renderExtraInfo && renderExtraInfo()));\\n};\\n\\nAccountLimitsTableCell.propTypes = {\\n  align: prop_types_default().oneOf(['right', 'left']),\\n  children: (prop_types_default()).any,\\n  is_hint: (prop_types_default()).bool,\\n  renderExtraInfo: (prop_types_default()).func\\n};\\n/* harmony default export */ const account_limits_table_cell = (AccountLimitsTableCell);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-table-header.jsx\\n\\n\\n\\n\\n\\nvar AccountLimitsTableHeader = function AccountLimitsTableHeader(_ref) {\\n  var align = _ref.align,\\n      children = _ref.children,\\n      renderExtraInfo = _ref.renderExtraInfo;\\n  return /*#__PURE__*/external_react_.createElement(\\\"th\\\", {\\n    className: classnames_default()('da-account-limits__table-header', {\\n      'da-account-limits__table-header--left': align !== 'right',\\n      'da-account-limits__table-header--right': align === 'right'\\n    })\\n  }, children && /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    align: align,\\n    as: \\\"p\\\",\\n    color: \\\"prominent\\\",\\n    size: \\\"xxs\\\",\\n    line_height: \\\"m\\\",\\n    weight: \\\"bold\\\"\\n  }, children), renderExtraInfo && renderExtraInfo());\\n};\\n\\nAccountLimitsTableHeader.propTypes = {\\n  align: prop_types_default().oneOf(['right', 'left']),\\n  children: (prop_types_default()).any\\n};\\n/* harmony default export */ const account_limits_table_header = (AccountLimitsTableHeader);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits-turnover-limit-row.jsx\\n\\n\\n\\n\\n\\n\\nvar AccountLimitsTurnoverLimitRow = function AccountLimitsTurnoverLimitRow(_ref) {\\n  var collection = _ref.collection,\\n      title = _ref.title;\\n\\n  var _React$useContext = external_react_.useContext(account_limits_context),\\n      currency = _React$useContext.currency;\\n\\n  if (!(collection !== null && collection !== void 0 && collection.length)) {\\n    return null;\\n  }\\n\\n  return collection.map(function (item) {\\n    return /*#__PURE__*/external_react_.createElement(\\\"tr\\\", {\\n      key: item.name\\n    }, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, null, title && \\\"\\\".concat(title, \\\" - \\\"), item.name), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n      align: \\\"right\\\"\\n    }, (0,shared_.formatMoney)(currency, item.turnover_limit, true)));\\n  });\\n};\\n\\nAccountLimitsTurnoverLimitRow.propTypes = {\\n  collection: prop_types_default().arrayOf((prop_types_default()).any),\\n  title: (prop_types_default()).any\\n};\\n/* harmony default export */ const account_limits_turnover_limit_row = (AccountLimitsTurnoverLimitRow);\\n;// CONCATENATED MODULE: ./Components/account-limits/account-limits.jsx\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar AccountLimits = function AccountLimits(_ref) {\\n  var account_limits = _ref.account_limits,\\n      currency = _ref.currency,\\n      footer_ref = _ref.footer_ref,\\n      getLimits = _ref.getLimits,\\n      is_app_settings = _ref.is_app_settings,\\n      is_fully_authenticated = _ref.is_fully_authenticated,\\n      is_switching = _ref.is_switching,\\n      is_virtual = _ref.is_virtual,\\n      overlay_ref = _ref.overlay_ref,\\n      setIsPopupOverlayShown = _ref.setIsOverlayShown,\\n      should_bypass_scrollbars = _ref.should_bypass_scrollbars,\\n      should_show_article = _ref.should_show_article;\\n  var isMounted = (0,shared_.useIsMounted)();\\n\\n  var _React$useState = external_react_.useState(false),\\n      _React$useState2 = _slicedToArray(_React$useState, 2),\\n      is_loading = _React$useState2[0],\\n      setLoading = _React$useState2[1];\\n\\n  var _React$useState3 = external_react_.useState(false),\\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\\n      is_overlay_shown = _React$useState4[0],\\n      setIsOverlayShown = _React$useState4[1];\\n\\n  var _React$useContext = external_react_.useContext(shared_.PlatformContext),\\n      is_dashboard = _React$useContext.is_dashboard;\\n\\n  external_react_.useEffect(function () {\\n    if (is_virtual) {\\n      setLoading(false);\\n    } else {\\n      getLimits().then(function () {\\n        if (isMounted()) setLoading(false);\\n      });\\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\\n\\n  }, []);\\n  external_react_.useEffect(function () {\\n    if (!is_virtual && account_limits && is_loading) {\\n      setLoading(false);\\n    }\\n  }, [account_limits, is_virtual, is_loading]);\\n  external_react_.useEffect(function () {\\n    if (typeof setIsPopupOverlayShown === 'function') {\\n      setIsPopupOverlayShown(is_overlay_shown);\\n    }\\n  }, [is_overlay_shown, setIsPopupOverlayShown]);\\n\\n  var toggleOverlay = function toggleOverlay() {\\n    return setIsOverlayShown(!is_overlay_shown);\\n  };\\n\\n  if (is_switching) {\\n    return /*#__PURE__*/external_react_.createElement(components_.Loading, {\\n      is_fullscreen: false\\n    });\\n  }\\n\\n  if (is_virtual) {\\n    return /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n      className: classnames_default()('account__demo-message-wrapper', {\\n        'account__demo-message-wrapper-dashboard': is_dashboard\\n      })\\n    }, /*#__PURE__*/external_react_.createElement(demo_message.default, {\\n      has_demo_icon: is_dashboard,\\n      has_button: is_dashboard\\n    }), \\\";\\\");\\n  }\\n\\n  var api_initial_load_error = account_limits.api_initial_load_error,\\n      open_positions = account_limits.open_positions,\\n      account_balance = account_limits.account_balance,\\n      payout = account_limits.payout,\\n      market_specific = account_limits.market_specific,\\n      num_of_days_limit = account_limits.num_of_days_limit,\\n      remainder = account_limits.remainder,\\n      withdrawal_since_inception_monetary = account_limits.withdrawal_since_inception_monetary;\\n\\n  if (api_initial_load_error) {\\n    return /*#__PURE__*/external_react_.createElement(load_error_message.default, {\\n      error_message: api_initial_load_error\\n    });\\n  }\\n\\n  if (is_switching || is_loading) {\\n    return /*#__PURE__*/external_react_.createElement(components_.Loading, {\\n      is_fullscreen: false\\n    });\\n  }\\n\\n  var _market_specific = _objectSpread({}, market_specific),\\n      commodities = _market_specific.commodities,\\n      forex = _market_specific.forex,\\n      indices = _market_specific.indices,\\n      synthetic_index = _market_specific.synthetic_index;\\n\\n  var forex_ordered = forex === null || forex === void 0 ? void 0 : forex.slice().sort(function (a, b) {\\n    return a.name < b.name ? 1 : -1;\\n  });\\n\\n  if (forex_ordered && forex_ordered.push) {\\n    forex_ordered.push(forex_ordered.shift());\\n  }\\n\\n  var context_value = {\\n    currency: currency,\\n    footer_ref: footer_ref,\\n    overlay_ref: overlay_ref,\\n    toggleOverlay: toggleOverlay\\n  };\\n  return /*#__PURE__*/external_react_.createElement(account_limits_context.Provider, {\\n    value: context_value\\n  }, /*#__PURE__*/external_react_.createElement(\\\"section\\\", {\\n    className: \\\"da-account-limits__wrapper\\\"\\n  }, /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: classnames_default()('da-account-limits', {\\n      'da-account-limits--app-settings': is_app_settings\\n    })\\n  }, should_show_article && (0,shared_.isMobile)() && /*#__PURE__*/external_react_.createElement(account_limits_article, null), /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-account-limits__table-wrapper\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.ThemedScrollbars, {\\n    is_bypassed: should_bypass_scrollbars || (0,shared_.isMobile)()\\n  }, /*#__PURE__*/external_react_.createElement(\\\"table\\\", {\\n    className: \\\"da-account-limits__table\\\"\\n  }, /*#__PURE__*/external_react_.createElement(\\\"thead\\\", null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_header, null, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Trading limits - Item\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_header, {\\n    align: \\\"right\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Limit\\\"\\n  })))), /*#__PURE__*/external_react_.createElement(\\\"tbody\\\", null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    renderExtraInfo: function renderExtraInfo() {\\n      return /*#__PURE__*/external_react_.createElement(account_limits_extra_info, {\\n        message: (0,translations_.localize)('Represents the maximum number of outstanding contracts in your portfolio. Each line in your portfolio counts for one open position. Once the maximum is reached, you will not be able to open new positions without closing an existing position first.')\\n      });\\n    }\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"*Maximum number of open positions\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, open_positions)), /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    renderExtraInfo: function renderExtraInfo() {\\n      return /*#__PURE__*/external_react_.createElement(account_limits_extra_info, {\\n        message: (0,translations_.localize)('Represents the maximum amount of cash that you may hold in your account.  If the maximum is reached, you will be asked to withdraw funds.')\\n      });\\n    }\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"*Maximum account cash balance\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, (0,shared_.formatMoney)(currency, account_balance, true))), /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    renderExtraInfo: function renderExtraInfo() {\\n      return /*#__PURE__*/external_react_.createElement(account_limits_extra_info, {\\n        message: (0,translations_.localize)('Represents the maximum aggregate payouts on outstanding contracts in your portfolio. If the maximum is attained, you may not purchase additional contracts without first closing out existing positions.')\\n      });\\n    }\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Maximum aggregate payouts on open positions\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, (0,shared_.formatMoney)(currency, payout, true))), /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    is_hint: true\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"*Any limits in your Self-exclusion settings will override these default limits.\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, null)))), /*#__PURE__*/external_react_.createElement(\\\"table\\\", {\\n    className: \\\"da-account-limits__table\\\"\\n  }, /*#__PURE__*/external_react_.createElement(\\\"thead\\\", null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_header, {\\n    renderExtraInfo: function renderExtraInfo() {\\n      return /*#__PURE__*/external_react_.createElement(account_limits_extra_info, {\\n        message: (0,translations_.localize)('Represents the maximum volume of contracts that you may purchase in any given trading day.')\\n      });\\n    }\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Trading limits - Maximum daily turnover\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_header, {\\n    align: \\\"right\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Limit\\\"\\n  })))), /*#__PURE__*/external_react_.createElement(\\\"tbody\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_turnover_limit_row, {\\n    collection: commodities\\n  }), /*#__PURE__*/external_react_.createElement(account_limits_turnover_limit_row, {\\n    collection: forex_ordered,\\n    title: (0,translations_.localize)('Forex')\\n  }), /*#__PURE__*/external_react_.createElement(account_limits_turnover_limit_row, {\\n    collection: indices\\n  }), /*#__PURE__*/external_react_.createElement(account_limits_turnover_limit_row, {\\n    collection: synthetic_index\\n  }))), !is_app_settings && /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(\\\"table\\\", {\\n    className: \\\"da-account-limits__table\\\"\\n  }, /*#__PURE__*/external_react_.createElement(\\\"thead\\\", null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_header, null, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Withdrawal limits\\\"\\n  })), is_fully_authenticated && /*#__PURE__*/external_react_.createElement(account_limits_table_header, {\\n    align: \\\"right\\\"\\n  }, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Limit\\\"\\n  })))), /*#__PURE__*/external_react_.createElement(\\\"tbody\\\", null, is_fully_authenticated ? /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: \\\"xxs\\\",\\n    color: \\\"prominent\\\"\\n  }, (0,translations_.localize)('Your account is fully authenticated and your withdrawal limits have been lifted.'))) : /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, null, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: is_dashboard ? 'Total withdrawal limit' : 'Total withdrawal allowed'\\n  }), is_dashboard && !is_fully_authenticated && /*#__PURE__*/external_react_.createElement(external_react_.Fragment, null, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    size: (0,shared_.isMobile)() ? 'xxxs' : 'xxs',\\n    className: \\\"account-management-table__verify\\\",\\n    color: \\\"less-prominent\\\",\\n    line_height: \\\"xs\\\"\\n  }, (0,translations_.localize)('To increase limit please verify your identity')), /*#__PURE__*/external_react_.createElement(components_.ButtonLink, {\\n    to: \\\"/account/proof-of-identity\\\",\\n    size: \\\"small\\\",\\n    className: \\\"account-management-table__verify-button\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    weight: \\\"bold\\\",\\n    color: \\\"colored-background\\\",\\n    size: (0,shared_.isMobile)() ? 'xxxs' : 'xxs'\\n  }, (0,translations_.localize)('Verify'))))), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, (0,shared_.formatMoney)(currency, num_of_days_limit, true))), /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, null, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Total withdrawn\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, (0,shared_.formatMoney)(currency, withdrawal_since_inception_monetary, true))), /*#__PURE__*/external_react_.createElement(\\\"tr\\\", null, /*#__PURE__*/external_react_.createElement(account_limits_table_cell, null, /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Maximum withdrawal remaining\\\"\\n  })), /*#__PURE__*/external_react_.createElement(account_limits_table_cell, {\\n    align: \\\"right\\\"\\n  }, (0,shared_.formatMoney)(currency, remainder, true)))))), !is_dashboard || (0,shared_.isMobile)() && /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: \\\"da-account-limits__text-container\\\"\\n  }, /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    as: \\\"p\\\",\\n    size: \\\"xxs\\\",\\n    color: \\\"less-prominent\\\",\\n    line_height: \\\"xs\\\"\\n  }, is_fully_authenticated ? /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Your account is fully authenticated and your withdrawal limits have been lifted.\\\"\\n  }) : /*#__PURE__*/external_react_.createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Stated limits are subject to change without prior notice.\\\"\\n  })))))), should_show_article && (0,shared_.isDesktop)() && /*#__PURE__*/external_react_.createElement(account_limits_article, null), footer_ref && /*#__PURE__*/external_react_.createElement(account_limits_footer, null), is_overlay_shown && overlay_ref && /*#__PURE__*/external_react_.createElement(account_limits_overlay, null))));\\n};\\n\\nAccountLimits.propTypes = {\\n  account_limits: (prop_types_default()).object,\\n  currency: (prop_types_default()).string.isRequired,\\n  footer_ref: prop_types_default().shape({\\n    current: (prop_types_default()).any\\n  }),\\n  is_app_settings: (prop_types_default()).bool,\\n  getLimits: (prop_types_default()).func.isRequired,\\n  is_fully_authenticated: (prop_types_default()).bool.isRequired,\\n  is_switching: (prop_types_default()).bool.isRequired,\\n  is_virtual: (prop_types_default()).bool.isRequired,\\n  overlay_ref: prop_types_default().shape({\\n    current: (prop_types_default()).any\\n  }),\\n  setIsPopupOverlayShown: (prop_types_default()).func,\\n  should_bypass_scrollbars: (prop_types_default()).bool,\\n  should_show_article: (prop_types_default()).bool\\n};\\n/* harmony default export */ const account_limits = (AccountLimits);\\n;// CONCATENATED MODULE: ./Components/account-limits/index.js\\n\\n\\n/* harmony default export */ const Components_account_limits = (account_limits);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Components/account-limits/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/demo-message/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* reexport */ demo_message)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n// EXTERNAL MODULE: ./Stores/connect.js\\nvar connect = __webpack_require__(\\\"./Stores/connect.js\\\");\\n;// CONCATENATED MODULE: ./Components/icon-with-message/icon-with-message.jsx\\n\\n\\n\\n\\n\\n\\n\\n\\nvar IconWithMessage = function IconWithMessage(_ref) {\\n  var icon = _ref.icon,\\n      message = _ref.message,\\n      has_button = _ref.has_button,\\n      toggleAccountsDialog = _ref.toggleAccountsDialog;\\n\\n  var _React$useContext = external_react_.useContext(shared_.PlatformContext),\\n      is_dashboard = _React$useContext.is_dashboard;\\n\\n  return /*#__PURE__*/external_react_.createElement(\\\"div\\\", {\\n    className: classnames_default()('da-icon-with-message', {\\n      'da-icon-with-message-full-width': is_dashboard\\n    })\\n  }, /*#__PURE__*/external_react_.createElement(components_.Icon, {\\n    icon: icon,\\n    size: 128\\n  }), /*#__PURE__*/external_react_.createElement(components_.Text, {\\n    className: \\\"da-icon-with-message__text\\\",\\n    as: \\\"p\\\",\\n    color: \\\"general\\\",\\n    size: shared_.isMobile ? 'xs' : 's',\\n    line_height: \\\"m\\\",\\n    weight: \\\"bold\\\"\\n  }, message), has_button && /*#__PURE__*/external_react_.createElement(components_.Button, {\\n    primary: true,\\n    onClick: toggleAccountsDialog,\\n    className: \\\"account__demo-message-button\\\"\\n  }, (0,translations_.localize)('Add a real account')));\\n};\\n\\nIconWithMessage.propTypes = {\\n  icon: (prop_types_default()).string.isRequired,\\n  has_button: (prop_types_default()).bool,\\n  message: (prop_types_default()).string.isRequired,\\n  toggleAccountsDialog: (prop_types_default()).func\\n};\\n/* harmony default export */ const icon_with_message = ((0,connect/* connect */.$j)(function (_ref2) {\\n  var ui = _ref2.ui;\\n  return {\\n    toggleAccountsDialog: ui.toggleAccountsDialog\\n  };\\n})(IconWithMessage));\\n;// CONCATENATED MODULE: ./Components/icon-with-message/index.js\\n\\n\\n/* harmony default export */ const Components_icon_with_message = (icon_with_message);\\n;// CONCATENATED MODULE: ./Components/demo-message/demo-message.jsx\\n\\n\\n\\n\\n\\nvar DemoMessage = function DemoMessage(_ref) {\\n  var has_demo_icon = _ref.has_demo_icon,\\n      has_button = _ref.has_button;\\n  return /*#__PURE__*/external_react_default().createElement(Components_icon_with_message, {\\n    icon: has_demo_icon ? 'IcPoaLockDemo' : 'IcPoaLock',\\n    message: (0,translations_.localize)('This feature is not available for demo accounts.'),\\n    has_button: has_button\\n  });\\n};\\n\\nDemoMessage.propTypes = {\\n  has_demo_icon: (prop_types_default()).bool,\\n  full_width: (prop_types_default()).bool\\n};\\n/* harmony default export */ const demo_message = (DemoMessage);\\n;// CONCATENATED MODULE: ./Components/demo-message/index.js\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2RlbW8tbWVzc2FnZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBV0E7QUFBQTtBQUFBO0FBQUE7QUFNQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFPQTtBQUFBO0FBQUE7QUFDQTtBQURBO0FBQUE7O0FDeENBO0FBQ0E7QUFFQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUhBO0FBREE7O0FBUUE7QUFDQTtBQUNBO0FBRkE7QUFLQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9pY29uLXdpdGgtbWVzc2FnZS9pY29uLXdpdGgtbWVzc2FnZS5qc3g/NjgwNSIsIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbXBvbmVudHMvaWNvbi13aXRoLW1lc3NhZ2UvaW5kZXguanM/N2JlYiIsIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbXBvbmVudHMvZGVtby1tZXNzYWdlL2RlbW8tbWVzc2FnZS5qc3g/MWUzOCIsIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbXBvbmVudHMvZGVtby1tZXNzYWdlL2luZGV4LmpzPzUxMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgSWNvbiwgVGV4dCwgQnV0dG9uIH0gZnJvbSAnQGRlcml2L2NvbXBvbmVudHMnO1xuaW1wb3J0IHsgaXNNb2JpbGUsIFBsYXRmb3JtQ29udGV4dCB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tICdAZGVyaXYvdHJhbnNsYXRpb25zJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdTdG9yZXMvY29ubmVjdCc7XG5cbmNvbnN0IEljb25XaXRoTWVzc2FnZSA9ICh7IGljb24sIG1lc3NhZ2UsIGhhc19idXR0b24sIHRvZ2dsZUFjY291bnRzRGlhbG9nIH0pID0+IHtcbiAgICBjb25zdCB7IGlzX2Rhc2hib2FyZCB9ID0gUmVhY3QudXNlQ29udGV4dChQbGF0Zm9ybUNvbnRleHQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RhLWljb24td2l0aC1tZXNzYWdlJywgeyAnZGEtaWNvbi13aXRoLW1lc3NhZ2UtZnVsbC13aWR0aCc6IGlzX2Rhc2hib2FyZCB9KX0+XG4gICAgICAgICAgICA8SWNvbiBpY29uPXtpY29ufSBzaXplPXsxMjh9IC8+XG4gICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGEtaWNvbi13aXRoLW1lc3NhZ2VfX3RleHQnXG4gICAgICAgICAgICAgICAgYXM9J3AnXG4gICAgICAgICAgICAgICAgY29sb3I9J2dlbmVyYWwnXG4gICAgICAgICAgICAgICAgc2l6ZT17aXNNb2JpbGUgPyAneHMnIDogJ3MnfVxuICAgICAgICAgICAgICAgIGxpbmVfaGVpZ2h0PSdtJ1xuICAgICAgICAgICAgICAgIHdlaWdodD0nYm9sZCdcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7bWVzc2FnZX1cbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICAgIHtoYXNfYnV0dG9uICYmIChcbiAgICAgICAgICAgICAgICA8QnV0dG9uIHByaW1hcnkgb25DbGljaz17dG9nZ2xlQWNjb3VudHNEaWFsb2d9IGNsYXNzTmFtZT0nYWNjb3VudF9fZGVtby1tZXNzYWdlLWJ1dHRvbic+XG4gICAgICAgICAgICAgICAgICAgIHtsb2NhbGl6ZSgnQWRkIGEgcmVhbCBhY2NvdW50Jyl9XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuSWNvbldpdGhNZXNzYWdlLnByb3BUeXBlcyA9IHtcbiAgICBpY29uOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgaGFzX2J1dHRvbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHRvZ2dsZUFjY291bnRzRGlhbG9nOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoKHsgdWkgfSkgPT4gKHtcbiAgICB0b2dnbGVBY2NvdW50c0RpYWxvZzogdWkudG9nZ2xlQWNjb3VudHNEaWFsb2csXG59KSkoSWNvbldpdGhNZXNzYWdlKTtcbiIsImltcG9ydCBJY29uV2l0aE1lc3NhZ2UgZnJvbSAnLi9pY29uLXdpdGgtbWVzc2FnZS5qc3gnO1xuaW1wb3J0ICcuL2ljb24td2l0aC1tZXNzYWdlLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBJY29uV2l0aE1lc3NhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnQGRlcml2L3RyYW5zbGF0aW9ucyc7XG5pbXBvcnQgSWNvbldpdGhNZXNzYWdlIGZyb20gJ0NvbXBvbmVudHMvaWNvbi13aXRoLW1lc3NhZ2UnO1xuXG5jb25zdCBEZW1vTWVzc2FnZSA9ICh7IGhhc19kZW1vX2ljb24sIGhhc19idXR0b24gfSkgPT4gKFxuICAgIDxJY29uV2l0aE1lc3NhZ2VcbiAgICAgICAgaWNvbj17aGFzX2RlbW9faWNvbiA/ICdJY1BvYUxvY2tEZW1vJyA6ICdJY1BvYUxvY2snfVxuICAgICAgICBtZXNzYWdlPXtsb2NhbGl6ZSgnVGhpcyBmZWF0dXJlIGlzIG5vdCBhdmFpbGFibGUgZm9yIGRlbW8gYWNjb3VudHMuJyl9XG4gICAgICAgIGhhc19idXR0b249e2hhc19idXR0b259XG4gICAgLz5cbik7XG5cbkRlbW9NZXNzYWdlLnByb3BUeXBlcyA9IHtcbiAgICBoYXNfZGVtb19pY29uOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmdWxsX3dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERlbW9NZXNzYWdlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9kZW1vLW1lc3NhZ2UuanN4JztcbiJdLCJuYW1lcyI6WyJQcm9wVHlwZXMiLCJSZWFjdCIsImNsYXNzTmFtZXMiLCJJY29uIiwiVGV4dCIsIkJ1dHRvbiIsImlzTW9iaWxlIiwiUGxhdGZvcm1Db250ZXh0IiwibG9jYWxpemUiLCJjb25uZWN0IiwiSWNvbldpdGhNZXNzYWdlIiwiaWNvbiIsIm1lc3NhZ2UiLCJoYXNfYnV0dG9uIiwidG9nZ2xlQWNjb3VudHNEaWFsb2ciLCJ1c2VDb250ZXh0IiwiaXNfZGFzaGJvYXJkIiwicHJvcFR5cGVzIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsImJvb2wiLCJmdW5jIiwidWkiLCJEZW1vTWVzc2FnZSIsImhhc19kZW1vX2ljb24iLCJmdWxsX3dpZHRoIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./Components/demo-message/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/icon-message-content/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ Components_icon_message_content)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\n// EXTERNAL MODULE: ../../../node_modules/classnames/index.js\\nvar classnames = __webpack_require__(\\\"../../../node_modules/classnames/index.js\\\");\\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n;// CONCATENATED MODULE: ./Components/icon-message-content/icon-message-content.jsx\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\n\\n\\n\\nvar IconMessageContent = function IconMessageContent(_ref) {\\n  var children = _ref.children,\\n      className = _ref.className,\\n      full_width = _ref.full_width,\\n      icon = _ref.icon,\\n      icon_row = _ref.icon_row,\\n      message = _ref.message,\\n      text = _ref.text;\\n  return /*#__PURE__*/external_react_default().createElement(components_.Div100vhContainer, {\\n    className: classnames_default()('account-management__message-wrapper', {\\n      'account-management__message-wrapper-full-width': full_width\\n    }),\\n    is_disabled: (0,shared_.isDesktop)(),\\n    height_offset: \\\"110px\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-management__message-content', _defineProperty({}, \\\"\\\".concat(className, \\\"__message-content\\\"), className))\\n  }, icon && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: classnames_default()('account-management__message-icon', _defineProperty({}, \\\"\\\".concat(className, \\\"__message-icon\\\"), className))\\n  }, icon), icon_row && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", null, icon_row), /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    as: \\\"div\\\",\\n    color: \\\"general\\\",\\n    weight: \\\"bold\\\",\\n    size: \\\"s\\\",\\n    align: \\\"center\\\",\\n    className: classnames_default()('account-management__message', _defineProperty({}, \\\"\\\".concat(className, \\\"__message\\\"), className))\\n  }, message), text && /*#__PURE__*/external_react_default().createElement(\\\"div\\\", {\\n    className: \\\"account-management__text-container\\\"\\n  }, /*#__PURE__*/external_react_default().createElement(components_.Text, {\\n    className: classnames_default()(_defineProperty({}, \\\"\\\".concat(className, \\\"__text\\\"), className)),\\n    as: \\\"p\\\",\\n    size: \\\"xs\\\",\\n    align: \\\"center\\\"\\n  }, text)), children));\\n};\\n\\nIconMessageContent.propTypes = {\\n  children: prop_types.PropTypes.oneOfType([prop_types.PropTypes.object, prop_types.PropTypes.array]),\\n  className: prop_types.PropTypes.string,\\n  full_width: prop_types.PropTypes.bool,\\n  icon: prop_types.PropTypes.object,\\n  message: prop_types.PropTypes.oneOfType([prop_types.PropTypes.node, prop_types.PropTypes.string, prop_types.PropTypes.object]),\\n  text: prop_types.PropTypes.oneOfType([prop_types.PropTypes.string, prop_types.PropTypes.element])\\n};\\n/* harmony default export */ const icon_message_content = (IconMessageContent);\\n;// CONCATENATED MODULE: ./Components/icon-message-content/index.js\\n\\n/* harmony default export */ const Components_icon_message_content = (icon_message_content);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2ljb24tbWVzc2FnZS1jb250ZW50L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUxBO0FBUUE7QUFEQTtBQU9BO0FBREE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQWFBO0FBQUE7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQU5BO0FBckNBOztBQXNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBUUE7O0FDcEVBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL0NvbXBvbmVudHMvaWNvbi1tZXNzYWdlLWNvbnRlbnQvaWNvbi1tZXNzYWdlLWNvbnRlbnQuanN4PzY4NzkiLCJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi9Db21wb25lbnRzL2ljb24tbWVzc2FnZS1jb250ZW50L2luZGV4LmpzP2FjYzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByb3BUeXBlcyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBEaXYxMDB2aENvbnRhaW5lciwgVGV4dCB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCB7IGlzRGVza3RvcCB9IGZyb20gJ0BkZXJpdi9zaGFyZWQnO1xuXG5jb25zdCBJY29uTWVzc2FnZUNvbnRlbnQgPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBmdWxsX3dpZHRoLCBpY29uLCBpY29uX3JvdywgbWVzc2FnZSwgdGV4dCB9KSA9PiAoXG4gICAgPERpdjEwMHZoQ29udGFpbmVyXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnYWNjb3VudC1tYW5hZ2VtZW50X19tZXNzYWdlLXdyYXBwZXInLCB7XG4gICAgICAgICAgICAnYWNjb3VudC1tYW5hZ2VtZW50X19tZXNzYWdlLXdyYXBwZXItZnVsbC13aWR0aCc6IGZ1bGxfd2lkdGgsXG4gICAgICAgIH0pfVxuICAgICAgICBpc19kaXNhYmxlZD17aXNEZXNrdG9wKCl9XG4gICAgICAgIGhlaWdodF9vZmZzZXQ9JzExMHB4J1xuICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdhY2NvdW50LW1hbmFnZW1lbnRfX21lc3NhZ2UtY29udGVudCcsIHtcbiAgICAgICAgICAgICAgICBbYCR7Y2xhc3NOYW1lfV9fbWVzc2FnZS1jb250ZW50YF06IGNsYXNzTmFtZSxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICA+XG4gICAgICAgICAgICB7aWNvbiAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2FjY291bnQtbWFuYWdlbWVudF9fbWVzc2FnZS1pY29uJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgW2Ake2NsYXNzTmFtZX1fX21lc3NhZ2UtaWNvbmBdOiBjbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge2ljb259XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAge2ljb25fcm93ICYmIDxkaXY+e2ljb25fcm93fTwvZGl2Pn1cbiAgICAgICAgICAgIDxUZXh0XG4gICAgICAgICAgICAgICAgYXM9J2RpdidcbiAgICAgICAgICAgICAgICBjb2xvcj0nZ2VuZXJhbCdcbiAgICAgICAgICAgICAgICB3ZWlnaHQ9J2JvbGQnXG4gICAgICAgICAgICAgICAgc2l6ZT0ncydcbiAgICAgICAgICAgICAgICBhbGlnbj0nY2VudGVyJ1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnYWNjb3VudC1tYW5hZ2VtZW50X19tZXNzYWdlJywge1xuICAgICAgICAgICAgICAgICAgICBbYCR7Y2xhc3NOYW1lfV9fbWVzc2FnZWBdOiBjbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge21lc3NhZ2V9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICB7dGV4dCAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FjY291bnQtbWFuYWdlbWVudF9fdGV4dC1jb250YWluZXInPlxuICAgICAgICAgICAgICAgICAgICA8VGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbYCR7Y2xhc3NOYW1lfV9fdGV4dGBdOiBjbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFzPSdwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZT0neHMnXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGlnbj0nY2VudGVyJ1xuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgPC9EaXYxMDB2aENvbnRhaW5lcj5cbik7XG5cbkljb25NZXNzYWdlQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5hcnJheV0pLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBmdWxsX3dpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpY29uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgdGV4dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmVsZW1lbnRdKSxcbn07XG5leHBvcnQgZGVmYXVsdCBJY29uTWVzc2FnZUNvbnRlbnQ7XG4iLCJpbXBvcnQgSWNvbk1lc3NhZ2VDb250ZW50IGZyb20gJy4vaWNvbi1tZXNzYWdlLWNvbnRlbnQuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbk1lc3NhZ2VDb250ZW50O1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHJvcFR5cGVzIiwiY2xhc3NOYW1lcyIsIkRpdjEwMHZoQ29udGFpbmVyIiwiVGV4dCIsImlzRGVza3RvcCIsIkljb25NZXNzYWdlQ29udGVudCIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwiZnVsbF93aWR0aCIsImljb24iLCJpY29uX3JvdyIsIm1lc3NhZ2UiLCJ0ZXh0IiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwib2JqZWN0IiwiYXJyYXkiLCJzdHJpbmciLCJib29sIiwibm9kZSIsImVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/icon-message-content/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Components/load-error-message/index.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* reexport */ load_error_message)\\n});\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n// EXTERNAL MODULE: ./Components/icon-message-content/index.js + 1 modules\\nvar icon_message_content = __webpack_require__(\\\"./Components/icon-message-content/index.js\\\");\\n;// CONCATENATED MODULE: ./Components/load-error-message/load-error-message.jsx\\n\\n\\n // TODO: Needs UI\\n\\nvar LoadErrorMessage = function LoadErrorMessage(_ref) {\\n  var error_message = _ref.error_message;\\n  return /*#__PURE__*/external_react_default().createElement(icon_message_content.default, {\\n    message: error_message,\\n    icon: /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n      icon: \\\"IcPoaLock\\\",\\n      size: 128\\n    })\\n  });\\n};\\n\\n/* harmony default export */ const load_error_message = (LoadErrorMessage);\\n;// CONCATENATED MODULE: ./Components/load-error-message/index.js\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db21wb25lbnRzL2xvYWQtZXJyb3ItbWVzc2FnZS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFHQTs7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFEQTs7QUFJQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9sb2FkLWVycm9yLW1lc3NhZ2UvbG9hZC1lcnJvci1tZXNzYWdlLmpzeD9iMDMwIiwid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4vQ29tcG9uZW50cy9sb2FkLWVycm9yLW1lc3NhZ2UvaW5kZXguanM/NDZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0BkZXJpdi9jb21wb25lbnRzJztcbmltcG9ydCBJY29uTWVzc2FnZUNvbnRlbnQgZnJvbSAnQ29tcG9uZW50cy9pY29uLW1lc3NhZ2UtY29udGVudCc7XG5cbi8vIFRPRE86IE5lZWRzIFVJXG5jb25zdCBMb2FkRXJyb3JNZXNzYWdlID0gKHsgZXJyb3JfbWVzc2FnZSB9KSA9PiAoXG4gICAgPEljb25NZXNzYWdlQ29udGVudCBtZXNzYWdlPXtlcnJvcl9tZXNzYWdlfSBpY29uPXs8SWNvbiBpY29uPSdJY1BvYUxvY2snIHNpemU9ezEyOH0gLz59IC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkRXJyb3JNZXNzYWdlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9sb2FkLWVycm9yLW1lc3NhZ2UuanN4JztcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkljb24iLCJJY29uTWVzc2FnZUNvbnRlbnQiLCJMb2FkRXJyb3JNZXNzYWdlIiwiZXJyb3JfbWVzc2FnZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Components/load-error-message/index.js\\n\");\n\n/***/ }),\n\n/***/ \"./Stores/connect.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"$j\\\": () => (/* binding */ connect)\\n/* harmony export */ });\\n/* unused harmony exports MobxContent, MobxContentProvider */\\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\\\"mobx-react\\\");\\n/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mobx_react__WEBPACK_IMPORTED_MODULE_0__);\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\\\"react\\\");\\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\n\\n\\n\\nvar isClassComponent = function isClassComponent(Component) {\\n  return !!(typeof Component === 'function' && Component.prototype && Component.prototype.isReactComponent);\\n};\\n\\nvar MobxContent = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext(null);\\n\\nfunction injectStorePropsToComponent(propsToSelectFn, BaseComponent) {\\n  var Component = function Component(own_props) {\\n    var store = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(MobxContent);\\n    var ObservedComponent = BaseComponent;\\n\\n    if (isClassComponent(BaseComponent)) {\\n      var FunctionalWrapperComponent = function FunctionalWrapperComponent(props) {\\n        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createElement(BaseComponent, props);\\n      };\\n\\n      ObservedComponent = FunctionalWrapperComponent;\\n    }\\n\\n    return (0,mobx_react__WEBPACK_IMPORTED_MODULE_0__.useObserver)(function () {\\n      return ObservedComponent(_objectSpread(_objectSpread({}, own_props), propsToSelectFn(store, own_props)));\\n    });\\n  };\\n\\n  Component.displayName = BaseComponent.name;\\n  return Component;\\n}\\n\\nvar MobxContentProvider = function MobxContentProvider(_ref) {\\n  var store = _ref.store,\\n      children = _ref.children;\\n  return /*#__PURE__*/React.createElement(MobxContent.Provider, {\\n    value: _objectSpread(_objectSpread({}, store), {}, {\\n      mobxStores: store\\n    })\\n  }, children);\\n};\\nvar connect = function connect(propsToSelectFn) {\\n  return function (Component) {\\n    return injectStorePropsToComponent(propsToSelectFn, Component);\\n  };\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9TdG9yZXMvY29ubmVjdC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBOztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQUNBO0FBQ0E7O0FBRUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvYWNjb3VudC8uL1N0b3Jlcy9jb25uZWN0LmpzPzQ3NmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlT2JzZXJ2ZXIgfSBmcm9tICdtb2J4LXJlYWN0JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGlzQ2xhc3NDb21wb25lbnQgPSBDb21wb25lbnQgPT5cbiAgICAhISh0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcblxuZXhwb3J0IGNvbnN0IE1vYnhDb250ZW50ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuZnVuY3Rpb24gaW5qZWN0U3RvcmVQcm9wc1RvQ29tcG9uZW50KHByb3BzVG9TZWxlY3RGbiwgQmFzZUNvbXBvbmVudCkge1xuICAgIGNvbnN0IENvbXBvbmVudCA9IG93bl9wcm9wcyA9PiB7XG4gICAgICAgIGNvbnN0IHN0b3JlID0gUmVhY3QudXNlQ29udGV4dChNb2J4Q29udGVudCk7XG5cbiAgICAgICAgbGV0IE9ic2VydmVkQ29tcG9uZW50ID0gQmFzZUNvbXBvbmVudDtcblxuICAgICAgICBpZiAoaXNDbGFzc0NvbXBvbmVudChCYXNlQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgY29uc3QgRnVuY3Rpb25hbFdyYXBwZXJDb21wb25lbnQgPSBwcm9wcyA9PiA8QmFzZUNvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xuICAgICAgICAgICAgT2JzZXJ2ZWRDb21wb25lbnQgPSBGdW5jdGlvbmFsV3JhcHBlckNvbXBvbmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1c2VPYnNlcnZlcigoKSA9PiBPYnNlcnZlZENvbXBvbmVudCh7IC4uLm93bl9wcm9wcywgLi4ucHJvcHNUb1NlbGVjdEZuKHN0b3JlLCBvd25fcHJvcHMpIH0pKTtcbiAgICB9O1xuXG4gICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gQmFzZUNvbXBvbmVudC5uYW1lO1xuICAgIHJldHVybiBDb21wb25lbnQ7XG59XG5cbmV4cG9ydCBjb25zdCBNb2J4Q29udGVudFByb3ZpZGVyID0gKHsgc3RvcmUsIGNoaWxkcmVuIH0pID0+IHtcbiAgICByZXR1cm4gPE1vYnhDb250ZW50LlByb3ZpZGVyIHZhbHVlPXt7IC4uLnN0b3JlLCBtb2J4U3RvcmVzOiBzdG9yZSB9fT57Y2hpbGRyZW59PC9Nb2J4Q29udGVudC5Qcm92aWRlcj47XG59O1xuXG5leHBvcnQgY29uc3QgY29ubmVjdCA9IHByb3BzVG9TZWxlY3RGbiA9PiBDb21wb25lbnQgPT4gaW5qZWN0U3RvcmVQcm9wc1RvQ29tcG9uZW50KHByb3BzVG9TZWxlY3RGbiwgQ29tcG9uZW50KTtcbiJdLCJuYW1lcyI6WyJ1c2VPYnNlcnZlciIsIlJlYWN0IiwiaXNDbGFzc0NvbXBvbmVudCIsIkNvbXBvbmVudCIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJNb2J4Q29udGVudCIsImNyZWF0ZUNvbnRleHQiLCJpbmplY3RTdG9yZVByb3BzVG9Db21wb25lbnQiLCJwcm9wc1RvU2VsZWN0Rm4iLCJCYXNlQ29tcG9uZW50Iiwib3duX3Byb3BzIiwic3RvcmUiLCJ1c2VDb250ZXh0IiwiT2JzZXJ2ZWRDb21wb25lbnQiLCJGdW5jdGlvbmFsV3JhcHBlckNvbXBvbmVudCIsInByb3BzIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiTW9ieENvbnRlbnRQcm92aWRlciIsImNoaWxkcmVuIiwibW9ieFN0b3JlcyIsImNvbm5lY3QiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./Stores/connect.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/classnames/index.js\":\n/***/ ((module, exports) => {\n\neval(\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\\n  Copyright (c) 2018 Jed Watson.\\n  Licensed under the MIT License (MIT), see\\n  http://jedwatson.github.io/classnames\\n*/\\n/* global define */\\n\\n(function () {\\n\\t'use strict';\\n\\n\\tvar hasOwn = {}.hasOwnProperty;\\n\\n\\tfunction classNames() {\\n\\t\\tvar classes = [];\\n\\n\\t\\tfor (var i = 0; i < arguments.length; i++) {\\n\\t\\t\\tvar arg = arguments[i];\\n\\t\\t\\tif (!arg) continue;\\n\\n\\t\\t\\tvar argType = typeof arg;\\n\\n\\t\\t\\tif (argType === 'string' || argType === 'number') {\\n\\t\\t\\t\\tclasses.push(arg);\\n\\t\\t\\t} else if (Array.isArray(arg)) {\\n\\t\\t\\t\\tif (arg.length) {\\n\\t\\t\\t\\t\\tvar inner = classNames.apply(null, arg);\\n\\t\\t\\t\\t\\tif (inner) {\\n\\t\\t\\t\\t\\t\\tclasses.push(inner);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (argType === 'object') {\\n\\t\\t\\t\\tif (arg.toString === Object.prototype.toString) {\\n\\t\\t\\t\\t\\tfor (var key in arg) {\\n\\t\\t\\t\\t\\t\\tif (hasOwn.call(arg, key) && arg[key]) {\\n\\t\\t\\t\\t\\t\\t\\tclasses.push(key);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tclasses.push(arg.toString());\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn classes.join(' ');\\n\\t}\\n\\n\\tif ( true && module.exports) {\\n\\t\\tclassNames.default = classNames;\\n\\t\\tmodule.exports = classNames;\\n\\t} else if (true) {\\n\\t\\t// register as 'classnames', consistent with npm package name\\n\\t\\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\\n\\t\\t\\treturn classNames;\\n\\t\\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\\n\\t} else {}\\n}());\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanM/M2RjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcygpIHtcblx0XHR2YXIgY2xhc3NlcyA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cdFx0XHRpZiAoIWFyZykgY29udGludWU7XG5cblx0XHRcdHZhciBhcmdUeXBlID0gdHlwZW9mIGFyZztcblxuXHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdzdHJpbmcnIHx8IGFyZ1R5cGUgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGNsYXNzZXMucHVzaChhcmcpO1xuXHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0aWYgKGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXIgPSBjbGFzc05hbWVzLmFwcGx5KG51bGwsIGFyZyk7XG5cdFx0XHRcdFx0aWYgKGlubmVyKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRpZiAoYXJnLnRvU3RyaW5nID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZy50b1N0cmluZygpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///../../../node_modules/classnames/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzP2RjMDciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2FjY291bnQvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanM/NzBkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9hY2NvdW50Ly4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9hZDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx-react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx_react__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ }),\n\n/***/ \"react-dom\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react_dom__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_121070__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_121070__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_121070__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_121070__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_121070__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_121070__.o(definition, key) && !__nested_webpack_require_121070__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_121070__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_121070__(\"./Components/account-limits/index.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__.default;\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../account/dist/account/js/account-limits.js\n");

/***/ })

}]);